
#read input file
openFile = open("Main.py", "rt")
data = openFile.read()
data = data.replace('checkAndCreateFactorySnapshot()', '# checkAndCreateFactorySnapshot()')
openFile.close()
openFile = open("Main.py", "wt")
openFile.write(data)
openFile.close()

openFile = open("/Database/Database.py", "rt")
data = openFile.read()
data = data.replace('mysql_passwd = Crypto.retrieve("db")', 'mysql_passwd = "!PrivateEyes!"')
openFile.close()
openFile = open("/Database/Database.py", "wt")
openFile.write(data)
openFile.close()

ooo = {"xml": ''}
if ooo["xml"]:
  print(1)
else:
  print(2)

print(str(ooo))

iii = str(ooo)
ppp = dict(iii)
print(type(iii), type(ppp))

import time
def sendProgress():
  global perProgress
  perProgress = True
  while True:
    if perProgress:
      print("step 1")
      print(perProgress)
      time.sleep(2)
      print ("goes into True")
      y = changePerProgress()
    else:
      print(perProgress)
      print("goes into false")
      perProgress = True

def changePerProgress():
  print("step 2")
  print("put in True or False")
  global perProgress
  #time.sleep(10)
  perProgress = False
  """
  inPut = input() 
  if inPut == "True":
    perProgress = True
  else:  
    perProgress = False  
  """
sendProgress()


device = {'1': ['172.16.5.227', '172.16.5.201', '172.16.5.154', '172.16.5.151', '172.16.5.155', '172.16.5.236', '172.16.5.230', '172.16.5.204', '172.16.5.158', '172.16.5.1'], '2': ['172.16.5.133'], '4':{}}
device.pop('2','key not found')
print(device)

hostset = {'123','1','432','654'}
test = [*hostset]
print(type(test))
for host in test:
  print(host)

from copy import deepcopy
savetodb = {}
updatejob = deepcopy(savetodb)
savetodb.update({'phaseIndex': ['phase_index','2','3']})
savetodb.update({'unscannedDevice': 'unscannedDevice'})
try:
  savetodb.pop('asdf','not found')
except Exception as erro:
  print (erro)
print(savetodb)
print("------")
print(updatejob)

if 'phaseIndee' in savetodb:
  print('exist')
else:
  print('not found')

#learn regular expression in python
import re
with open('resolv.conf','r') as file:
  data = file.read()
  dns = re.findall('nameserver ([0-9, \.]*)',data)
for dnsadd in dns:
  print(dnsadd)

y = "HTTPSConnectionPool(host='eft.lanaware.com', port=443): Max retries exceeded with url: /api/Jobs/664/patchVulnRes?access_token=lCsDHE9uIfXjYvTZlsNHUcyUTQfTTgBEheAj2T0PBouCk3cM0fGwwBXLOXLRf9lC (Caused by NewConnectionError('<urllib3.connection. VerifiedHTTPSConnection object at 0x7f465280fbd0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))"

if "Temporary failure in name resolution" in y:
  print(True)
else:
  print(False)


# learn json.dumps and json.loads
import json
jobdata = {'jobRequest': None, 'jobTargetList': None, 'jobData': '{"jobRequest": {"config": {"1": {"name": "eth0", "downloadSpeed": null, "isStatic": false, "ipv6": "fe80::20e:c4ff:fed4:4495%eth0", "gateway": "172.16.5.1", "broadcast": "172.16.5.255", "isTrunk": false}}}}'}
dictionary = json.loads(jobdata['jobData'])['jobRequest']
#print(type(dictionary), dictionary)

jobdata1 = {'jobTargetList': None, 'jobData': {}}

jobdata1['jobData']={'totalDevice':2}
print(jobdata1)
jobdata1['jobData'].update({"jobRequest": {"config": {"1": {"name": "eth0", "downloadSpeed": None, "isStatic": False, "ipv6": "fe80::20e:c4ff:fed4:4495%eth0", "gateway": "172.16.5.1", "broadcast": "172.16.5.255", "isTrunk": False}}}})
print(jobdata1)

popo = {'2':[2,3,4,1],'3':{}}
print(type(popo['2']))
list1 = [2,3,4,1]
set1 = set(list1)
list2 = list(set1)

popo = json.dumps(popo)
print(len(popo))

# trying import time.perf_counter
import time
tic = time.perf_counter()
time.sleep(1)
toc = time.perf_counter() 
print(f"ping-pong time is {toc - tic:0.5f} seconds")



# convert string with list to a list
import ast
emptylist = ['12','123.13.1']
emptylist2 = "['123.13.1','12']"
res = ast.literal_eval(emptylist2)
print(res)
print(type(res))
if set(emptylist) == set(res):
  print('equal')


try:  
  for ip in emptylist:
    print('in')
    for ip1 in emptylist2:
      if ip != ip1:
        print(123114)
      else: 
        print(213)
except Exception as err:
  print(err)


# learning import datetime
from datetime import datetime
now = datetime.now()
later = "2020-12-06 7:52:58.932077"
iii = datetime.strptime(later, "%Y-%m-%d %H:%M:%S.%f")
diff = divmod((now-iii).total_seconds(), 60)

print(diff)
if diff[0] > 60:
  print("scan expired")

testdict = {'se':'se','sefse':'sf'}
testdict['erd'] = 'mer'
print(testdict)


#learning *args and **kwargs
def test_var_args(farg, *args):
    print ("formal arg1:", farg)
    print(type(args))
    for arg in args:
        print ("another arg1:", arg)

test_var_args(1, "two", 3)

def test_var_kwargs(farg, **kwargs):
    print ("formal arg2:", farg)
    print(type(kwargs))
    for key in kwargs:
        print ("another keyword arg2: %s: %s" % (key, kwargs[key]))

test_var_kwargs(1, myarg2="two", myarg3=3)
